@import "compass/reset";
@import "compass/typography";
@import "compass/css3";
@import "compass/utilities";
@import "normalize";

@function black($opacity) {
	@return rgba(0,0,0,$opacity)
}

@function white($opacity) {
	@return rgba(255,255,255,$opacity)
}

@mixin box-emboss($opacity, $opacity2) {
	@include box-shadow(white($opacity) 0 1px 0, black($opacity2) 0 1px 0 inset);
}

@mixin letterpress-light($opacity) {
	@include text-shadow(white($opacity) 0 1px 0);
}

@mixin letterpress-dark($opacity) {
	@include text-shadow(black($opacity) 0 -1px 0);
}

@mixin hide-text {
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
    overflow: hidden;
    // IE 6/7 fallback
    *text-indent: -9999px;
}

// Calculate fluid ratio based on two dimensions (width/height)
@mixin fluid-ratio($large-size, $small-size) {
  $width-large: nth($large-size, 1);
  $width-small: nth($small-size, 1);
  $height-large: nth($large-size, 2);
  $height-small: nth($small-size, 2);
  $slope: ($height-large - $height-small) / ($width-large - $width-small);
  $height: $height-small - $width-small * $slope;

  padding-top: $slope * 100%;
  height: $height;

  @include background-size(cover); // -webkit-, -moz-, -o-
  background-position: center;  // Internet Explorer 7/8
}

// Specify hi-res background for retina displays
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    // on retina, use image that's scaled by 2
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin myClearfix {
  *zoom: 1;
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    height: 0;
    clear: both;
    overflow: hidden;
    visibility: hidden;
  }
}

@mixin animation (
	$name: none, // keyframename|none
	$duration: 500ms, // time(default=0) 
	$timing_function: ease, // linear|ease(default)|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n)default
	$iteration_count: 1, // n|infinite 
	$direction: normal, // normal|alternate
	$delay: 0 // time(default=0)
) {
    @if $name == none {
        @include experimental(animation, none, -moz, -webkit, -o, not -ms, not -khtml, official);
    }
    @else {
        $full: $name $duration $timing_function;
        @if $delay > 0 {
            $full: $full $delay;
        }
        $full: $full $iteration_count $direction; 
        @include experimental(animation, $full, -moz, -webkit, -o, not -ms, not -khtml, official);
    }
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-o-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

@mixin imgRep($w, $h, $src, $x: 0, $y: 0) {
    display: block;
    position: relative;
    @if $w == "" { width: auto; } @else { width: $w+px; }
    @if $h == "" { height: auto; } @else { height: $h+px; }
    background: url($src) no-repeat $x $y transparent;
    @include background-size(auto);
    border: 0;
    text-shadow: none;
    text-indent: -9999px;
    overflow: hidden;
}

@mixin bkgSizeFix($src) {
    filter: progid:DXImageTransform.Microsoft.AlphaImageLoader( src='[#{$src}]', sizingMethod='scale');
    -ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader( src='[#{$src}]', sizingMethod='scale')";
}